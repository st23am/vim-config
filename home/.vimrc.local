set autoread
nmap <Leader>w :w <CR>
imap jj <esc>
inoremap <Tab> <C-P>
autocmd BufWritePre * :%s/\s\+$//e
set noswapfile
set mouse=a
set number
set clipboard=unnamed
set winwidth=85
"Powerline, the ultimate vim status bar
let g:Powerline_symbols = 'fancy'

"No beeping and visual bell
set noeb vb t_vb=

Bundle 'rphillips/vim-zoomwin'
" I want to believe ...
"Bundle 'tpope/vim-dispatch'
Bundle 'scrooloose/nerdtree'
nmap <silent> <Leader>n :NERDTreeToggle<CR>

filetype plugin on
" Alternative: use the following to also enable language-dependent indenting.
filetype plugin indent on
Bundle 'vim-scripts/VimClojure'
Bundle 'flazz/vim-colorschemes'
Bundle 'lokaltog/vim-powerline'
Bundle 'st23am/vim-railsapi'
Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-commentary'
Bundle 'rizzatti/funcoo.vim'
Bundle 'rizzatti/dash.vim'
Bundle 'elixir-lang/vim-elixir'
Bundle 'scrooloose/snipmate-snippets'
Bundle 'carlosgaldino/elixir-snippets'
Bundle 'mattonrails/vim-mix.git'

nmap <silent> <leader>d <Plug>DashSearch
" Relative line numbering + toggle to normal numbering
"set relativenumber

function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

nmap <silent> <leader>l :call NumberToggle()<CR>

":au FocusLost * :set number
":au FocusGained * :set relativenumber

" TODO: Bring back when I ditch CtrlP
"yank ring show
"nnoremap <Leader>c :YRShow<CR>

map <C-s> :w<CR>
imap <C-s> <esc>:w<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Test-running stuff
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RunCurrentTest()
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
  if in_test_file
    call SetTestFile()

    if match(expand('%'), '\.feature$') != -1
      call SetTestRunner("!bundle exec cucumber")
      exec g:bjo_test_runner g:bjo_test_file
    elseif match(expand('%'), '_spec\.rb$') != -1
      call SetTestRunner("!bundle exec rspec")
      exec g:bjo_test_runner g:bjo_test_file
    else
      call SetTestRunner("!bundle exec ruby -Itest")
      exec g:bjo_test_runner g:bjo_test_file
    endif
  else
    exec g:bjo_test_runner g:bjo_test_file
  endif
endfunction

function! SetTestRunner(runner)
  let g:bjo_test_runner=a:runner
endfunction

function! RunCurrentLineInTest()
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
  if in_test_file
    call SetTestFileWithLine()
  end

  exec "!bundle exec rspec" g:bjo_test_file . ":" . g:bjo_test_file_line
endfunction

function! SetTestFile()
  let g:bjo_test_file=@%
endfunction

function! SetTestFileWithLine()
  let g:bjo_test_file=@%
  let g:bjo_test_file_line=line(".")
endfunction

function! CorrectTestRunner()
  if match(expand('%'), '\.feature$') != -1
    return "cucumber"
  elseif match(expand('%'), '_spec\.rb$') != -1
    return "rspec"
  else
    return "ruby"
  endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <C-d> :call RunCurrentTest()<cr>

function! OpenRoutes()
  execute "e config/routes.rb"
endfunction

command! -buffer -bar Rroutes :call OpenRoutes()

" Set up some useful Rails.vim bindings for working with Backbone.js
autocmd User Rails Rnavcommand jtemplate   app/assets/javascripts/templates    -glob=**/*  -suffix=.jst.ejs
autocmd User Rails Rnavcommand jhandlebars app/assets/javascripts/templates    -glob=**/*  -suffix=.handlebars
autocmd User Rails Rnavcommand jmodel      app/assets/javascripts/models       -glob=**/*  -suffix=.coffee
autocmd User Rails Rnavcommand jview       app/assets/javascripts/views        -glob=**/*  -suffix=.coffee
autocmd User Rails Rnavcommand jcollection app/assets/javascripts/collections  -glob=**/*  -suffix=.coffee
autocmd User Rails Rnavcommand jrouter     app/assets/javascripts/routers      -glob=**/*  -suffix=.coffee
autocmd User Rails Rnavcommand jroutes     app/assets/javascripts/routes       -glob=**/*  -suffix=.coffee
autocmd User Rails Rnavcommand jspec       spec/javascripts                    -glob=**/*  -suffix=.coffee


" Permanent undo
set undofile

" set a directory to store the undo history
set undodir=~/.vim/undo/

" Took from Gary Bernhardt
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" " Indent if we're at the beginning of a line. Else, do completion.
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

"Shows cmd pressed in normal mode
set showcmd

" NAVIGATION
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l


" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Disable Ex mode
map Q <Nop>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Emacs-like beginning and end of line.
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE (thanks Gary Bernhardt)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

augroup elixir
  au!
  au FileType elixir noremap <buffer> <leader>t :!mix test<cr>
augroup END

if has("autocmd")
  au BufNewFile,BufRead *.exs set filetype=elixir
  au BufNewFile,BufRead *.ex set filetype=elixir
endif

au BufRead,BufNewFile *.ex,*.exs set filetype=elixir
au FileType elixir setl sw=2 sts=2 et iskeyword+=!,?

"TODO: map me to something
" Disable Ex mode
" Disable Ex mode
map Q <Nop>
map Q <Nop>
"map <Leader>n :call RenameFile()<cr>
"
